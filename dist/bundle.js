!function(e){var t={};function n(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(o,s,function(t){return e[t]}.bind(null,s));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class o{constructor(e){this.getRandomDigit=()=>Math.floor(Math.random()*this.selection.oldBase).toString(this.selection.oldBase).toUpperCase(),this.generateProblem=(e=4)=>{for(let t=0;t<e;++t)this._question+=this.getRandomDigit();document.getElementById("question").textContent=this.question},this._question="",this.selection=e}get question(){return this._question}}class s{constructor(){this.confirmChoice=e=>{document.getElementById("confirm-choices").addEventListener("click",()=>{const t=document.getElementById("base-select-1").value,n=document.getElementById("base-select-2").value;t!==n?(e.selection._oldBase=parseInt(t),e.selection._newBase=parseInt(n),document.getElementById("choose-practice").classList.toggle("hide-display"),e.generateProblem(),document.getElementById("practice-problems").classList.toggle("hide-display")):console.log("bro")})},this._amount=4,this._oldBase=0,this._newBase=0}get oldBase(){return this._oldBase}get newBase(){return this._newBase}}var r;!function(e){e[e.Hexadecimal=16]="Hexadecimal",e[e.Binary=2]="Binary"}(r||(r={}));class i{constructor(e,t){this.isCorrect=()=>(this.calculateAnswer(),this.solution===this._userSolution.grabInput().replace(/\s/g,"")),this.calculateAnswer=()=>{const e=this._randProblem.selection.oldBase,t=this._randProblem.selection.newBase,n=parseInt(this._randProblem.question,e),o=n.toString(t);e!==r.Hexadecimal||t!==r.Binary||o.length===4*n?this.solution=o:this.solution=o.padStart(r.Hexadecimal,"0")},this._userSolution=e,this._randProblem=t}}class l{constructor(){this.onSubmit=e=>{document.getElementById("user-answer").addEventListener("submit",t=>{t.preventDefault();const n=new i(this,e),o=document.querySelector(".tip");null!==this.grabInput()?(n.isCorrect()?o.textContent="Woah epic move!":o.textContent="Sadge not right",document.querySelector(".test").textContent=n.solution,document.querySelector(".test2").textContent=n.solution.length.toString()):o.textContent="You didn't enter a value! >:("})},this.grabInput=()=>document.getElementById("user-input").value}}(()=>{const e=new s,t=new l,n=new o(e);e.confirmChoice(n),t.onSubmit(n)})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,