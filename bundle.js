!function(t){var e={};function n(o){if(e[o])return e[o].exports;var s=e[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(o,s,function(e){return t[e]}.bind(null,s));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);class o{constructor(t){this.getRandomDigit=()=>Math.floor(Math.random()*this.selection.oldBase).toString(this.selection.oldBase).toUpperCase(),this.erasePreviousQuestion=()=>{this._question=""},this.generateProblem=(t=4)=>{for(let e=0;e<t;++e)this._question+=this.getRandomDigit();const e=this.selection.oldBase.toString(),n=this.selection.newBase.toString();document.getElementById("question").textContent="",document.getElementById("question").textContent=this.question,document.getElementById("base-1").textContent=e,document.getElementById("base-2").textContent=n},this.pushQuestionGotWrong=t=>{this._wrongAnswers.push(t),console.log(this._wrongAnswers)},this._wrongAnswers=[],this._question="",this.selection=t}get question(){return this._question}}class s{constructor(){this.confirmChoice=t=>{document.getElementById("confirm-choices").addEventListener("click",()=>{const e=document.getElementById("base-select-1").value,n=document.getElementById("base-select-2").value;e!==n&&(t.selection._oldBase=parseInt(e),t.selection._newBase=parseInt(n),document.getElementById("choose-practice").classList.toggle("hide-display"),t.generateProblem(),document.getElementById("practice-problems").classList.toggle("hide-display"),document.getElementById("practice-problems").classList.toggle("flex-column"))})},this._amount=4,this._oldBase=0,this._newBase=0}get oldBase(){return this._oldBase}get newBase(){return this._newBase}}var i;!function(t){t[t.Hexadecimal=16]="Hexadecimal",t[t.Binary=2]="Binary"}(i||(i={}));class r{constructor(t,e){this.isCorrect=()=>(this.calculateAnswer(),this.solution===this._userSolution.grabInput().replace(/\s/g,"")),this.calculateAnswer=()=>{const t=this._randProblem.selection.oldBase,e=this._randProblem.selection.newBase,n=parseInt(this._randProblem.question,t),o=n.toString(e);t!==i.Hexadecimal||e!==i.Binary||o.length===4*n?this.solution=o:this.solution=o.padStart(i.Hexadecimal,"0")},this._userSolution=t,this._randProblem=e}}class u{constructor(){this.incrementRightCount=()=>{this._rightCount+=1},this.incrementWrongCount=()=>{this._wrongCount+=1},this.resetScore=()=>{this._rightCount=0,this._wrongCount=0},this._rightCount=0,this._wrongCount=0}}class l{constructor(t){this.onSubmit=()=>{document.getElementById("user-answer").addEventListener("submit",t=>{if(t.preventDefault(),!0===this._submitState)return;const e=new r(this,this._currentProblem),n=document.querySelector(".tip");null!==this.grabInput()?(e.isCorrect()?(n.textContent="Woah epic move!",this._userScore.incrementRightCount()):(n.textContent="Sadge not right",this._userScore.incrementWrongCount(),this._currentProblem.pushQuestionGotWrong(this._currentProblem.question)),document.querySelector(".test").textContent=e.solution,document.querySelector(".test2").textContent=e.solution.length.toString(),document.querySelector(".result button").classList.toggle("hide-visibility"),this._submitState=!0):n.textContent="You didn't enter a value! >:("})},this.showNextQuestion=()=>{document.querySelector(".result button").addEventListener("click",()=>{this._submitState=!1,this._currentProblem.erasePreviousQuestion(),this._currentProblem.generateProblem(),document.querySelector(".result button").classList.toggle("hide-visibility")})},this.grabInput=()=>document.getElementById("user-input").value,this._currentProblem=t,this._userScore=new u,this._submitState=!1}}(()=>{const t=new s,e=new o(t),n=new l(e);t.confirmChoice(e),n.onSubmit(),n.showNextQuestion()})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,